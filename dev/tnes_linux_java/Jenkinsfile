/**
 * Linux/Java 向け Jenkinsfileテンプレート
 *
 * このパイプラインはデフォルトでは
 *   ビルド→テスト→コード検証→デプロイ
 * を実行します。
 *
 * 利用前に以下の情報を利用環境／測定環境に合わせて変更してください。
 * - Jenkinsfile 内設定項目 (environment{} 内)
 *   1. SonarQubeサーバー
 *      - SONAR_SERVER
 *        → << PROJECT_ID >>にSWFのプロジェクトIDを指定してください。
 *           ビルド自動化スターターキットを使用した場合、<< PROJECT_ID >>は自動で設定されます。
 *   2. sonar-scanner のインストールディレクトリ
 *      - SONAR_SCANNER_HOME
 *        → sonar-scanner のアーカイブを展開したディレクトリを指定してください。
 *           ${SONAR_SCANNER_HOME}/bin/sonar-scanner が存在するようにしてください。
 *   3. ncmeter のインストールディレクトリ (ncmeter を利用する場合)
 *      - NCMETER_HOME
 *        → ncmeter のアーカイブを展開したディレクトリを指定
 *           ${NCMETER_HOME}/bin/ncmeter が存在するようにしてください。
 *
 * - Jenkinsfile 内設定項目 (agent{} 内)
 *   1. Jenkins エージェントのノード名
 *      - << NODE_LABEL >>
 *        → 本Jenkinsfile のジョブを実行する Jenkins エージェントのノードを指定します。
 *           ノード名で指定する場合には、Jenkins master のトップ画面にある
 *           「ビルド実行状態」に表示されている "[ProjectID]_[ビルド・テスト環境マシン名]"
 *           を設定してください。
 *           ノードのラベルで指定する場合には、「Jenkinsの管理」→「ノードの管理」で
 *           対象のノードを選択した際に表示される Labels 項目の内容を設定してください。
 *           Labels 項目が表示されない、または Label 項目自体が存在しない場合には
 *           「設定」から該当ノードに対しての適切なラベルを登録した上で、本項目を
 *           設定してください。
 *           ビルド自動化スターターキットを使用した場合、<< NODE_LABEL >>は自動で設定されます。
 *
 * - Jenkinsfile 内設定項目 (parameters{} 内)
 *   1. ncmeter でのメトリクス測定のデフォルト有効化フラグ
 *      → ENABLE_NCMETER
 *         ncmeter でのメトリクス測定可否のデフォルト値を指定します。
 *         GitLab からの Webhook でジョブを自動起動する際に
 *           ncmeter を有効にする場合 ⇒ defaultValue: true
 *                     無効にする場合 ⇒ defaultValue: false
 *         を設定してください。
 *         ジョブを手動起動する場合には Jenkins 画面の「パラメータ付きビルド」を
 *         押下後にパラメータ設定画面が表示されますのでそこで設定が可能です。
 *   2. ncmeter で差分測定をする際のベースとなるソースコードのリビジョン
 *      → BASE_REVISION
 *         ベースとなるソースコードのリビジョンを指定します。
 *   3. ncmeter 用に checkout する際の credentialsId
 *      → CREDENTIALS_ID
 *         Jenkins から git にアクセスする際の credential (a<プロジェクトID>jnk@swf.nec.co.jp) を
 *         指定する Id を指定します。
 *         credentialsId は Jenkins の画面上から以下の手順で取得して defaultValue に
 *         設定してください。
 *           i. Jenkins の当該ジョブの画面を表示
 *          ii. 画面左側のメニューの、「Pipeline Syntax」を選択
 *         iii. 「Sample Step」にて "git: Git" を選択
 *          iv. 画面に表示されている各項目に以下の内容を設定
 *              ・リポジトリURL : ベースライン用 Git リポジトリの URL
 *              ・ブランチ      : (任意) 例：master
 *              ・認証情報      : a<プロジェクトID>jnk@swf.nec.co.jp
 *           v. 「Generate Pipeline Script」を押下
 *          vi. 表示されたスクリプト内の credentialsId の項目を取得
 */
pipeline {
    /* Pipeline 全体を通して利用する agent を指定します。*/
    agent {
        label  '1017918_build1008017'
    }
    environment {
        SONAR_SERVER = "a1017918jnk@swf.nec.co.jp"
        SONAR_SCANNER_HOME = "/opt/tools/sonar-scanner"
        NCMETER_HOME = "/opt/tools/ncmeter"
    }
    
    parameters {
        // ncmeter のデフォルト有効化フラグ
        booleanParam(name: 'ENABLE_NCMETER', defaultValue: true)

        // ベースとなるソースコードのコミットID
        string(name: 'BASE_REVISION', defaultValue: '', description: 'base rivision of svn repository')

        // ncmeter 用に checkout する際の credentialsId
        string(name: 'CREDENTIALS_ID', defaultValue: '324a7621-1ef1-493a-a3a4-b85df6094307', description: 'credentialsId to access git repository') ;
    }

    stages {
        stage ('Prepare'){
            steps {
                script {
                    sh "mvn clean"
                    if (params.ENABLE_NCMETER) {
                        sh "rm -rf report;mkdir report"
                        dir (path: 'target') {
                            deleteDir()
                            dir (path: 'last_src') {
                                sh "touch .keep.me"

                                // ビルド対象ソースの取得
                                checkout([
                                  $class: 'SubversionSCM',
                                  additionalCredentials: [],
                                  excludedCommitMessages: '',
                                  excludedRegions: '',
                                  excludedRevprop: '',
                                  excludedUsers: '',
                                  filterChangelog: false,
                                  ignoreDirPropChanges: false,
                                  includedRegions: '',
                                  locations: [[cancelProcessOnExternalsFail: true,
                                  credentialsId: params.CREDENTIALS_ID,
                                  depthOption: 'infinity',
                                  ignoreExternalsOption: true,
                                  local: './',
                                  remote: SVN_URL]],
                                  quietOperation: true,
                                  workspaceUpdater: [$class: 'CheckoutUpdater']
                                ])
                            }
                            if (params.BASE_REVISION != null && !params.BASE_REVISION.equals("")) {
                                dir (path: 'init_src') {
                                    sh "touch .keep.me";
                                    def BASE_SVN_URL = SVN_URL + '@' + params.BASE_REVISION
                                    echo "specified base url is : ${BASE_SVN_URL}"

                                    // ベースラインソースの取得
                                    checkout([
                                      $class: 'SubversionSCM',
                                      additionalCredentials: [],
                                      excludedCommitMessages: '',
                                      excludedRegions: '',
                                      excludedRevprop: '',
                                      excludedUsers: '',
                                      filterChangelog: false,
                                      ignoreDirPropChanges: false,
                                      includedRegions: '',
                                      locations: [[cancelProcessOnExternalsFail: true,
                                      credentialsId: params.CREDENTIALS_ID,
                                      depthOption: 'infinity',
                                      ignoreExternalsOption: true,
                                      local: './',
                                      remote: BASE_SVN_URL]],
                                      quietOperation: true,
                                      workspaceUpdater: [$class: 'CheckoutUpdater']
                                    ])

                                    // ncmeter による差分測定の実施
                                    sh "${NCMETER_HOME}/bin/ncmeter -diff -v -F xml -RESTYLE NONE  ./src ../last_src/src -Tfp ../last_src/ncmeter.properties  -Tfo ../../report/ncmeter-diff.xml"
                                }
                            }
                            // ncmeter による構造メトリクス測定の実施
                            sh "${NCMETER_HOME}/bin/ncmeter -struct -v -F xml ./last_src/src -Tfp ./last_src/ncmeter.properties -Tfo ../report/ncmeter-struct.xml"
                        }
                    }
                }
            }
        }

        // ビルドの実施
        stage ('Build'){
            steps {
                script{
                    sh "mvn package -DskipTests=true"
                }
            }
        }

        // テストの実施
        stage ('Test'){
            steps {
                script{
                    sh "mvn org.jacoco:jacoco-maven-plugin:prepare-agent test integration-test -Dmaven.test.failure.ignore=true"
                }
                junit 'target/surefire-reports/*.xml,target/failsafe-reports/*.xml'
            }
        }

        // コード検証の実施
        stage ('CodeAnalysis'){
            steps {
                script {
                    withSonarQubeEnv("${SONAR_SERVER}") {
                        sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner -Dproject.settings=./sonar-project.properties"
                    }
                }
            }
        }

        // 成果物をJenkinsに登録
        stage ('Publish') {
            steps {
                archiveArtifacts 'target/*.jar'
            }
        }
    }
}
